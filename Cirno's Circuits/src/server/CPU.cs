using LogicAPI.Server.Components;

namespace CirnosCircuits {
    public class DecodeRom : LogicComponent {
        private IOHandler ioHandler;
        private readonly (byte, byte)[] masks = {
            (0b111001, 0b100001), // 100XX1
            (0b000111, 0b000100), // XXX100 
            (0b000111, 0b000110), // XXX110
            (0b111100, 0b110000), // 1100XX
            (0b111111, 0b100110), // 100110
            (0b101111, 0b100010), // 1X0010
            (0b111111, 0b000000), // 000000 
            (0b110000, 0b100000), // 10XXXX
            (0b000101, 0b000101), // XXX1X1
            (0b000111, 0b000000), // XXX000 
            (0b111111, 0b100010), // 100010
            (0b111111, 0b110010), // 110010
            (0b111100, 0b111000), // 1110XX
            (0b111111, 0b100110), // 100110
            (0b111000, 0b100000), // 100XXX  
            (0b111000, 0b101000), // 101XXX
            (0b111111, 0b110010), // 110010
            (0b111111, 0b111010), // 111010
            (0b111111, 0b101110), // 101110
            (0b101111, 0b100010), // 1X0010
            (0b111001, 0b101001), // 101XX1
            (0b111100, 0b101000), // 1010XX
            (0b100101, 0b000000), // 0XX0X0
            (0b111111, 0b001000), // 001000
            (0b101111, 0b000010), // 0X0010
            (0b111111, 0b011000), // 011000
            (0b101111, 0b001010), // 0X1010
            (0b111111, 0b010000), // 010000
            (0b111000, 0b011000), // 011XXX
            (0b111111, 0b001000), // 001000
            (0b110111, 0b010011), // 01X011 
            (0b000000, 0b000000), // XXXXXX 
            (0b000111, 0b000011), // XXX011
            (0b110111, 0b010000), // 01X000
            (0b000111, 0b000000), // XXX000
            (0b000000, 0b000000), // XXXXXX
            (0b000010, 0b000000), // XXXX0X 
            (0b111111, 0b010000), // 010000
            (0b110111, 0b000000), // 00X000
            (0b100100, 0b000000), // 0XX0XX
            (0b000111, 0b000100), // XXX100
            (0b000111, 0b000000), // XXX000
            (0b000111, 0b000100), // XXX100
            (0b000111, 0b000100), // XXX100
            (0b000110, 0b000110), // XXX11X
            (0b101111, 0b001010), // 0X1010
            (0b111000, 0b111000), // 111XXX
            (0b111000, 0b010000), // 010XXX
            (0b111000, 0b110000), // 110XXX
            (0b110100, 0b110000), // 11X0XX
            (0b011000, 0b011000), // X11XXX
            (0b111000, 0b111000), // 111XXX
            (0b111000, 0b001000), // 001XXX
            (0b110111, 0b010011), // 01X011
            (0b111000, 0b000000), // 000XXX
            (0b110000, 0b000000), // 00XXXX
            (0b111111, 0b100110), // 100110
            (0b111111, 0b100010), // 100010
            (0b011000, 0b011000), // X11XXX
            (0b100000, 0b000000), // 0XXXXX
            (0b100111, 0b000010), // 0XX010
            (0b111111, 0b011010), // 011010
            (0b000110, 0b000110), // XXX11X
            (0b000111, 0b000100), // XXX100
            (0b111000, 0b101000), // 101XXX
            (0b000000, 0b000000), // XXXXXX
            (0b111000, 0b001000), // 001XXX
            (0b111101, 0b001001), // 0010X1
            (0b100111, 0b000010), // 0XX010
            (0b111111, 0b101010), // 101010
            (0b111111, 0b101010), // 101010
            (0b110111, 0b010010), // 01X010
            (0b110000, 0b010000), // 01XXXX
            (0b111111, 0b001000), // 001000
            (0b000111, 0b000100), // XXX100
            (0b111111, 0b000000), // 000000
            (0b111111, 0b001000), // 001000
            (0b000011, 0b000001), // XXXX01
            (0b000011, 0b000000), // XXXX00
            (0b000000, 0b000000), // XXXXXX
            (0b000000, 0b000000), // XXXXXX
            (0b101111, 0b000000), // 0X0000
            (0b110111, 0b010011), // 01X011
            (0b100101, 0b000000), // 0XX0X0
            (0b111111, 0b011000), // 011000
            (0b000010, 0b000010), // XXXX1X
            (0b111000, 0b100000), // 100XXX
            (0b111111, 0b010010), // 010010
            (0b000111, 0b000100), // XXX100
            (0b100111, 0b000010), // 0XX010
            (0b000111, 0b000000), // XXX000
            (0b000010, 0b000010), // XXXX1X
            (0b000111, 0b000100), // XXX100
            (0b000110, 0b000110), // XXX11X
            (0b101111, 0b000000), // 0X0000
            (0b111111, 0b001000), // 001000
            (0b110111, 0b010011), // 01X011
            (0b110110, 0b110000), // 11X00X
            (0b110111, 0b000010), // 00X010
            (0b110111, 0b110011), // 11X011
            (0b111000, 0b110000), // 110XXX
            (0b011000, 0b011000), // X11XXX
            (0b110000, 0b000000), // 00XXXX
            (0b010000, 0b010000), // X1XXXX
            (0b111101, 0b001001), // 0010X1
            (0b111111, 0b000010), // 000010
            (0b111111, 0b000000), // 000000
            (0b111000, 0b100000), // 100XXX
            (0b000110, 0b000110), // XXX11X
            (0b000011, 0b000000), // XXXX00
            (0b000111, 0b000001), // XXX001
            (0b000111, 0b000011), // XXX011
            (0b000111, 0b000101), // XXX101
            (0b101111, 0b000010), // 0X0010
            (0b110111, 0b010000), // 01X000
            (0b111111, 0b001000), // 001000
            (0b110111, 0b010011), // 01X011
            (0b111111, 0b010011), // 010011
            (0b101111, 0b001010), // 0X1010
            (0b000111, 0b000100), // XXX100
            (0b111101, 0b001001), // 0010X1
            (0b111111, 0b010000), // 010000
            (0b111111, 0b001010), // 001010
            (0b100111, 0b000010), // 0XX010
            (0b111111, 0b101110), // 101110
            (0b110111, 0b000110), // 00X110
            (0b110111, 0b010110), // 01X110
            (0b110111, 0b110110), // 11X110
            (0b100000, 0b000000), // 0XXXXX
            (0b010000, 0b000000)  // X0XXXX
        };
        
        private readonly int[] group1Indexes = {
            1, 2, 9, 34, 40, 41, 42, 43, 47, 48, 50, 51, 54, 58, 59, 63, 64, 65, 66, 78, 86, 90, 92, 100, 101, 109
        };
        private readonly int[] group2Indexes = {
            7, 10, 11, 13, 14, 15, 16, 18, 28, 46, 52, 55, 57, 60, 68, 69, 71, 72, 98, 102, 103
        };
        private readonly int[] group3Indexes = {
            0, 3, 4, 5, 6, 12, 17, 19, 20, 21, 22, 23, 24, 25, 
            26, 27, 29, 30, 33, 37, 38, 39, 45, 49, 53, 56, 61, 
            67, 70, 73, 74, 75, 76, 81, 82, 83, 84, 87, 88, 89, 
            94, 95, 96, 97, 99, 104, 105, 106, 113, 114, 115, 116, 
            117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
        };

        private readonly int[][] tStateIndexes = {
            new [] {
                3, 4, 5, 10, 11, 12, 13, 15, 18, 20, 21, 23, 24, 
                35, 47, 48, 49, 50, 51, 54, 56, 57, 61, 64, 65, 
                66, 67, 68, 69, 70, 71, 81, 82, 88, 120, 122, 125, 126, 127
            },
            new [] {
                16, 17, 58, 59, 60, 97, 98, 99, 100, 101, 104
            },
            new [] {
                2, 8, 9, 22, 29, 31, 32, 36, 43, 74, 75, 77, 78, 83, 85, 87, 105, 110, 113, 117
            },
            new [] {
                1, 26, 39, 40, 41, 44, 53, 76, 80, 91, 93, 111, 112, 118, 119
            },
            new [] {
                25, 34, 37, 38, 42, 62, 79, 92, 106, 108, 116, 121
            },
            new [] {
                6, 27, 63, 73, 84, 90, 109, 114, 115
            }
        };
        
        private bool[] rom = new bool[130];
        private readonly bool[] groups = new bool[130];
        private readonly bool[] states = new bool[130];

        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);

            for (var i = 0; i < 130; i++) {
                groups[i] = true;
                states[i] = true;
            }
        }
        
        private void UpdateRom(byte instruction, bool[] tState) {
            var gp1 = (instruction & 1) != 0;
            var gp2 = (instruction & 2) != 0;
            var gp3 = (instruction & 3) == 0;

            foreach (var t in group1Indexes) { groups[t] = gp1; }
            foreach (var t in group2Indexes) { groups[t] = gp2; }
            foreach (var t in group3Indexes) { groups[t] = gp3; }

            for (var i = 0; i < 6; i++) {
                foreach (var j in tStateIndexes[i]) {
                    states[j] = tState[i];
                }
            }
            
            for (var i = 0; i < rom.Length; i++) {
                rom[i] = Bitmask(masks[i], instruction) && groups[i] && states[i];
            }
        }
        
        private static bool Bitmask((byte toCheck, byte toMatch) bits, byte value) {
            var temp = (value >> 2) & 0b111111;
            var match = bits.toMatch & bits.toCheck; // Just a sanity check
            return (temp & bits.toCheck) == match;
        }

        protected override void DoLogicUpdate() {
            ioHandler.ClearOutputs();
            var instruction = ioHandler.GetInputAs<byte>();
            var tState = ioHandler.GrabBoolArrayFromInput(0, 6);
            
            UpdateRom(instruction, tState);
            
            ioHandler.OutputBoolArray(rom);
        }
    }
    
    public class BATPU2ControlUnit : LogicComponent {
        private IOHandler ioHandler;
        private bool[] signals;
        private const int ADD = 0;
        private const int SUB = 1;
        private const int NOR = 2;
        private const int AND = 3;
        private const int XOR = 4;
        private const int RSH = 5;
        private const int UFR = 6;
        private const int Z = 7;
        private const int NZ = 8;
        private const int CS = 9;
        private const int CC = 10;
        private const int ALU_REG = 11;
        private const int ALU_IMM = 12;
        private const int SE_IMM = 13;
        private const int REG_EN = 14;
        private const int WR_A = 15;
        private const int WR_B = 16;
        private const int WR_C = 17;
        private const int STACK_EN = 18;
        private const int STACK_PUSH = 19;
        private const int STACK_POP = 20;
        private const int RAM_EN = 21;
        private const int RAM_R = 22;
        private const int RAM_W = 23;
        private const int PC_EN = 24;
        private const int IMM_DB = 25;
        private const int ALU_DB = 26;
        private const int RAM_DB = 27;
        private const int NPC_AB = 28;
        private const int IMM_AB = 29;
        private const int STACK_AB = 30;
        private const int HALT = 31;

        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);
            signals = new bool[32];
        }

        protected override void DoLogicUpdate() {
            var input = ioHandler.GetInputAs<byte>();
            // Bits: RBCCOOOO
            // R: Reset, B: Branch, CC: Condition, OOOO: Opcode
            var opcode = input & 0xF;
            var condition = (input >> 4) & 0x3;
            var takeBranch = (input & 0b01000000) != 0;
            var reset = (input & 0b10000000) != 0;

            signals[ADD] = opcode is 2 or 9 or >= 14;
            signals[SUB] = opcode is 3;
            signals[NOR] = opcode is 4;
            signals[AND] = opcode is 5;
            signals[XOR] = opcode is 6;
            signals[RSH] = opcode is 7;
            signals[UFR] = opcode is <= 6 and >= 2 or 9;
            signals[Z] = condition is 0;
            signals[NZ] = condition is 1;
            signals[CS] = condition is 2;
            signals[CC] = condition is 3;
            signals[ALU_REG] = opcode is <= 7 and >= 2;
            signals[ALU_IMM] = opcode is 9 or >= 14;
            signals[SE_IMM] = opcode >= 14;
            signals[REG_EN] = opcode is <= 9 and >= 2 or 14;
            signals[WR_A] = opcode is 8 or 9;
            signals[WR_B] = opcode >= 14;
            signals[WR_C] = opcode is <= 7 and >= 2;
            signals[STACK_EN] = opcode is 12 or 13;
            signals[STACK_PUSH] = opcode is 12;
            signals[STACK_POP] = opcode is 13;
            signals[RAM_EN] = opcode >= 14;
            signals[RAM_R] = opcode is 14;
            signals[RAM_W] = opcode is 15;
            signals[PC_EN] = opcode is not 1;
            signals[IMM_DB] = opcode is 8;
            signals[ALU_DB] = opcode is <= 7 and >= 2 or 9;
            signals[RAM_DB] = opcode is 14;
            signals[NPC_AB] = opcode is not (10 or 11 or 12 or 13);
            signals[IMM_AB] = opcode is 10 or 12;
            signals[STACK_AB] = opcode is 13;
            signals[HALT] = opcode is 1;

            if (opcode == 11) {
                if (takeBranch) {
                    signals[NPC_AB] = false;
                    signals[IMM_AB] = true;
                } else {
                    signals[NPC_AB] = true;
                    signals[IMM_AB] = false;
                }
            }

            if (reset) {
                signals[PC_EN] = true;
                signals[NPC_AB] = false;
                signals[IMM_AB] = false;
                signals[STACK_AB] = false;
            }
            
            ioHandler.OutputBoolArray(signals);
        }
    }
    
    public class GBDisplayUnit : LogicComponent {
        private IOHandler ioHandler;
        private bool[,] displayData, displayBuffer;
        private bool prevClk;
        private bool clk;
        private const int PIXEL_OUT_INDEX = 23040;

        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);
            displayData = new bool[160, 144]; // Resolution of the original Game Boy
            displayBuffer = new bool[160, 144];
            prevClk = false;
        }

        protected override void DoLogicUpdate() {
            var x = ioHandler.GetInputAs<byte>();
            var y = ioHandler.GetInputAs<byte>(8);
            var pixelValue = Inputs[16].On;
            var clearScreen = Inputs[17].On;
            var clearBuffer = Inputs[18].On;
            var pushBuffer = Inputs[19].On;
            var writePixel = Inputs[20].On;
            clk = Inputs[21].On;
            var risingEdge = !prevClk && clk;
            prevClk = clk;
            var inBounds = x < 160 && y < 144;
            
            if (clearScreen && risingEdge) {
                for (var i = 0; i < 160; i++) {
                    for (var j = 0; j < 144; j++) {
                        displayData[i, j] = false;
                    }
                }
            }
            if (clearBuffer && risingEdge) {
                for (var i = 0; i < 160; i++) {
                    for (var j = 0; j < 144; j++) {
                        displayBuffer[i, j] = false;
                    }
                }
            }
            if (pushBuffer && risingEdge) {
                ioHandler.ClearOutputs();
                for (var i = 0; i < 160; i++) {
                    for (var j = 0; j < 144; j++) {
                        displayData[i, j] = displayBuffer[i, j];
                    }
                }
                ioHandler.OutputBoolArray(displayData);
            }

            if (writePixel && inBounds && risingEdge) {
                displayBuffer[x, y] = pixelValue;
            }
            
            if (!inBounds) return;
            Outputs[PIXEL_OUT_INDEX].On = pixelValue;
        }
    }
    
    public class SquareDisplayUnit : LogicComponent {
        private IOHandler ioHandler;
        private bool[,] displayData, displayBuffer;
        private bool prevClk;
        private bool clk;
        private const int PIXEL_OUT_INDEX = 4096;

        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);
            displayData = new bool[64,64];
            displayBuffer = new bool[64,64];
            prevClk = false;
        }

        protected override void DoLogicUpdate() {
            var x = ioHandler.GetInputAs<byte>() & 0x3F;
            var y = ioHandler.GetInputAs<byte>(6) & 0x3F;
            var pixelValue = Inputs[12].On;
            var clearScreen = Inputs[13].On;
            var clearBuffer = Inputs[14].On;
            var pushBuffer = Inputs[15].On;
            var writePixel = Inputs[16].On;
            clk = Inputs[17].On;
            var risingEdge = !prevClk && clk;
            prevClk = clk;
            
            if (clearScreen && risingEdge) {
                for (var i = 0; i < 63; i++) {
                    for (var j = 0; j < 63; j++) {
                        displayData[i, j] = false;
                    }
                }
            }
            if (clearBuffer && risingEdge) {
                for (var i = 0; i < 63; i++) {
                    for (var j = 0; j < 63; j++) {
                        displayBuffer[i, j] = false;
                    }
                }
            }
            if (pushBuffer && risingEdge) {
                ioHandler.ClearOutputs();
                for (var i = 0; i < 63; i++) {
                    for (var j = 0; j < 63; j++) {
                        displayData[i, j] = displayBuffer[i, j];
                    }
                }
                ioHandler.OutputBoolArray(displayData);
            }

            if (writePixel && risingEdge) {
                displayBuffer[x, y] = pixelValue;
            }
            
            Outputs[PIXEL_OUT_INDEX].On = pixelValue;
        }
    }

    public class StackUnit : LogicComponent {
        private IOHandler ioHandler;
        private ushort[] stack;
        private bool prevClk;
        private bool clk;
        private bool pop;
        private bool enable;
        private bool reset;
        private int stackPointer;
        private const int STACK_SIZE = 256;
        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);
            stack = new ushort[STACK_SIZE];
            prevClk = false;
            stackPointer = 0;
        }

        protected override void DoLogicUpdate() {
            var address = ioHandler.GetInputAs<ushort>();
            clk = Inputs[16].On;
            pop = Inputs[17].On;
            enable = Inputs[18].On;
            reset = Inputs[19].On;

            if (reset) {
                for (var i = 0; i < STACK_SIZE; i++) {
                    stack[i] = 0;
                }
                stackPointer = 0;
                ioHandler.ClearOutputs();
                return;
            }

            var risingEdge = !prevClk && clk;
            ioHandler.ClearOutputs();
            if (!enable) return;
            if (risingEdge) {
                if (pop) {
                    Pop();
                } else {
                    Push(address);
                }
            } else {
                var outValue = stackPointer << 16 | Peek();
                ioHandler.OutputNumber(outValue);
            }
        }
        
        private void Push(ushort value) {
            stack[stackPointer++] = value;
            if (stackPointer >= STACK_SIZE) { stackPointer -= STACK_SIZE; }
        }
        
        private void Pop() {
            stackPointer--;
            if (stackPointer < 0) { stackPointer += STACK_SIZE; }
        }

        private ushort Peek() {
            return stack[stackPointer];
        }
    }

    public class ProgramROM : LogicComponent {
        private IOHandler ioHandler;
        // All programs are from https://github.com/mattbatwings/BatPU-2/tree/main/programs
        private readonly ushort[] tetris = {
            0b1010000000000001,
            0b1000111111110110,
            0b1111111100000000,
            0b1000111111110000,
            0b1000000100011110,
            0b1000001000000010,
            0b1000001100001010,
            0b1000010000010101,
            0b0011001101000000,
            0b1011000000010001,
            0b1111111100110000,
            0b1111111100010001,
            0b1111111100000010,
            0b1111111100100001,
            0b1111111100000010,
            0b1001001100000001,
            0b1010000000001000,
            0b1000000100011111,
            0b1000001100001010,
            0b0011001000010000,
            0b1011000000011100,
            0b1111111100110000,
            0b1111111100100001,
            0b1111111100000010,
            0b1111111101000000,
            0b1111111100000010,
            0b1001001000000001,
            0b1010000000010011,
            0b1000000100010100,
            0b1000001000010111,
            0b1111111100010000,
            0b1111111100100001,
            0b1111111100000010,
            0b1000000100001011,
            0b1111111100010000,
            0b1111111100100001,
            0b1111111100000010,
            0b1000111111110101,
            0b1111111100000000,
            0b1000111111111011,
            0b1111111100000000,
            0b1000111111111101,
            0b1111111100000000,
            0b1000111111111010,
            0b1111111100000000,
            0b1000111111111001,
            0b1111111100000000,
            0b1000111111110111,
            0b1000111000010100,
            0b1111111111100000,
            0b1000111000000101,
            0b1111111111100000,
            0b1000111000010100,
            0b1111111111100000,
            0b1000111000010010,
            0b1111111111100000,
            0b1000111000001001,
            0b1111111111100000,
            0b1000111000010011,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111111111000,
            0b1111111100000000,
            0b1010000001000111,
            0b1000111100000000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000001,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111011111111,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111011111111,
            0b1111111111100010,
            0b1000111000000001,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111011111111,
            0b1111111111100100,
            0b1000111000000001,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000001,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111011111111,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111000000001,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000001,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111000000001,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111011111111,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000001,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111011111111,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111011111110,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111000000010,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1001111100001000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100001,
            0b1000111011111111,
            0b1111111111100010,
            0b1000111000000001,
            0b1111111111100011,
            0b1000111011111111,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1000111110110110,
            0b1000111000000010,
            0b1111111111100000,
            0b1111111111100001,
            0b1111111111100010,
            0b1111111111100011,
            0b1111111111100100,
            0b1111111111100101,
            0b1111111111100110,
            0b1111111111100111,
            0b1001111100001000,
            0b1111111111100000,
            0b1111111111100001,
            0b1000111111010100,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111000000001,
            0b1111111111100100,
            0b1000111011111111,
            0b1111111111100101,
            0b1000111011111111,
            0b1111111111100110,
            0b1000111011111111,
            0b1111111111100111,
            0b1001111100001000,
            0b1000111000000001,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100001,
            0b1000111011111111,
            0b1111111111100010,
            0b1000111000000000,
            0b1111111111100011,
            0b1000111000000000,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1000111000000000,
            0b1111111111100110,
            0b1000111011111111,
            0b1111111111100111,
            0b1001111100001000,
            0b1000111011111111,
            0b1111111111100000,
            0b1000111011111111,
            0b1111111111100001,
            0b1000111000000001,
            0b1111111111100010,
            0b1000111011111111,
            0b1111111111100011,
            0b1000111011111111,
            0b1111111111100100,
            0b1000111000000000,
            0b1111111111100101,
            0b1000111000000001,
            0b1111111111100110,
            0b1000111000000000,
            0b1111111111100111,
            0b1000111110011001,
            0b1000101100000001,
            0b1111111110110000,
            0b1001101100100000,
            0b1111111110110001,
            0b1001101100100000,
            0b1111111110110010,
            0b1001101100100000,
            0b1111111110110011,
            0b1001101100010000,
            0b1111111110110100,
            0b1001101100010000,
            0b1111111110110101,
            0b1001101100010000,
            0b1111111110110110,
            0b1000111111000000,
            0b1000101100000100,
            0b1111111110110000,
            0b1000101100000101,
            0b1111111110110001,
            0b1000101100000111,
            0b1111111110110010,
            0b1000101100000001,
            0b1111111110110011,
            0b1000101100000000,
            0b1111111110110100,
            0b1000101100000110,
            0b1111111110110101,
            0b1000101100000011,
            0b1111111110110110,
            0b1000101100000010,
            0b1111111110110111,
            0b1010001010001000,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111111110000,
            0b1111111101000000,
            0b1111111101010001,
            0b1111111100000010,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011010110101010,
            0b1011111111100011,
            0b0010010000100010,
            0b0010010100110011,
            0b1111111100100000,
            0b1111111100110001,
            0b1111111100000010,
            0b1001000100000010,
            0b1010000110100101,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111111110000,
            0b1111111101000000,
            0b1111111101010001,
            0b1111111100000011,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011010110111100,
            0b1011111111100101,
            0b0010010000100010,
            0b0010010100110011,
            0b1111111100100000,
            0b1111111100110001,
            0b1111111100000011,
            0b1001000100000010,
            0b1010000110110111,
            0b1000110101100000,
            0b0011000111010000,
            0b1011110111001110,
            0b1000110110010000,
            0b0011000111010000,
            0b1011110111001010,
            0b1101000000000000,
            0b1000110100001000,
            0b0101011111011101,
            0b0010000111010001,
            0b1101000000000000,
            0b1000110100011000,
            0b0101011111011101,
            0b0010000111010001,
            0b1101000000000000,
            0b1000111111001000,
            0b1000111000000100,
            0b1110111110010000,
            0b0010100100000000,
            0b1011010111100100,
            0b1000111111111110,
            0b1000110100000111,
            0b1110111100010000,
            0b0101000111010001,
            0b1110111100100000,
            0b0101001011010010,
            0b1110111100110000,
            0b0101001111010011,
            0b1000100100001000,
            0b1000111111001000,
            0b1111111100010001,
            0b1111111100100010,
            0b1111111100110011,
            0b1001100111111111,
            0b1111111110010000,
            0b1000111111001000,
            0b0010111111101111,
            0b1110111100010001,
            0b1001111011111111,
            0b1011000111110000,
            0b1000111111000000,
            0b0010111110011111,
            0b1110111110010000,
            0b0110000110011001,
            0b1010000111100110,
            0b0010100100000000,
            0b1011000111010010,
            0b1000111110011000,
            0b0010111110011111,
            0b1110111110010000,
            0b1001100111111111,
            0b1101000000000000,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111111111111,
            0b0011100011110000,
            0b1011010111111110,
            0b0010010000001000,
            0b1101000000000000,
            0b1000111111110000,
            0b1111111110000000,
            0b1111111101010001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011001000000110,
            0b0010010000001000,
            0b1101000000000000,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011011000001011,
            0b1011111111100101,
            0b0010100000100010,
            0b0010010100110011,
            0b1000111100010101,
            0b0011001011110000,
            0b1011011000010010,
            0b0010010000001000,
            0b1101000000000000,
            0b1000111100001010,
            0b0011001011110000,
            0b1011011000010111,
            0b0010010000001000,
            0b1101000000000000,
            0b1000111111110000,
            0b1111111100100000,
            0b1111111100110001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011001000011111,
            0b0010010000001000,
            0b1101000000000000,
            0b1001000100000010,
            0b1010001000000110,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111111111111,
            0b0011110011110000,
            0b1011011000101000,
            0b0010010100001100,
            0b1101000000000000,
            0b1000111111110000,
            0b1111111110000000,
            0b1111111111000001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011001000110000,
            0b0010010100001100,
            0b1101000000000000,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011011000110101,
            0b1011111111100101,
            0b0010100000100010,
            0b0010110000110011,
            0b1000111100000010,
            0b0011001111110000,
            0b1011011000111100,
            0b0010010100001100,
            0b1101000000000000,
            0b1000111111110000,
            0b1111111100100000,
            0b1111111100110001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011001001000100,
            0b0010010100001100,
            0b1101000000000000,
            0b1001000100000010,
            0b1010001000110000,
            0b0010000001100001,
            0b1000111111101111,
            0b1111111101110000,
            0b1001111010000000,
            0b0010101101110111,
            0b1000101111010010,
            0b0101011111100000,
            0b1011001001001111,
            0b1001101100001100,
            0b1100000111000011,
            0b1001101100000010,
            0b1000111111101000,
            0b0011101111110000,
            0b1011001010000100,
            0b1110101110100000,
            0b1110101111100001,
            0b1000111111110000,
            0b0010100000000010,
            0b0010010100000011,
            0b0010101000100010,
            0b0010111000110011,
            0b1111111100100000,
            0b1111111100110001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011011001010000,
            0b1000111100000010,
            0b0011001111110000,
            0b1011001001010000,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011011001101000,
            0b1011111001111101,
            0b0010100000100010,
            0b0010010100110011,
            0b0010101000100010,
            0b0010111000110011,
            0b1000111100001011,
            0b0011001011110000,
            0b1011111001010000,
            0b1000111100010101,
            0b0011001011110000,
            0b1011101001010000,
            0b1000111100000010,
            0b0011001111110000,
            0b1011001001010000,
            0b1000111111110000,
            0b1111111100100000,
            0b1111111100110001,
            0b1110111111010100,
            0b0010110100000000,
            0b1011011001010000,
            0b1001000100000010,
            0b1010001001100011,
            0b0010100010101000,
            0b0010010111101100,
            0b0010011100001011,
            0b1000111111101111,
            0b1110111101110000,
            0b0011101101111011,
            0b1101000000000000,
            0b1000111111101111,
            0b1110111101110000,
            0b1000101100000000,
            0b1101000000000000,
            0b1000010000010000,
            0b1000010100011011,
            0b1000011100000000,
            0b1100000111010010,
            0b0010000010010110,
            0b1100000110011111,
            0b1000111001100100,
            0b1100001011111111,
            0b1010001010010010,
            0b1100001100000011,
            0b1000010000010000,
            0b1000010100011011,
            0b1000011100000000,
            0b0010000010010110,
            0b1100000110110001,
            0b0010000010011100,
            0b1100000111010010,
            0b1000011100000000,
            0b0010000010010110,
            0b1100000110011111,
            0b0010000011000110,
            0b1000010100010111,
            0b1100000110011111,
            0b1100000110110001,
            0b1000101100000000,
            0b1000111111111111,
            0b1110111110100000,
            0b0010010000001000,
            0b0010101000000000,
            0b1011001011000011,
            0b1000111111101101,
            0b1110111111110000,
            0b0101111110100000,
            0b1011011011001011,
            0b1000111100000010,
            0b0101111110100000,
            0b1011011011100110,
            0b1000111100000001,
            0b0101111110100000,
            0b1011001010110001,
            0b1001100011111111,
            0b1000111100000100,
            0b0101111110100000,
            0b1011001010110101,
            0b1001100000000001,
            0b0011100001000000,
            0b1011001010111000,
            0b1100000111110111,
            0b1000111100100000,
            0b0101111110100000,
            0b1011001010111100,
            0b1001101100001000,
            0b1000111100010000,
            0b0101111110100000,
            0b1011001011000000,
            0b1001101111111000,
            0b0010101100000000,
            0b1011001011000011,
            0b1100001001000110,
            0b0010101101110111,
            0b1001110000000001,
            0b0011110001010000,
            0b1011001011101111,
            0b1000110011111111,
            0b0010010111001100,
            0b1100001000100001,
            0b1010001011110000,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111110101011,
            0b0010111101001111,
            0b1110111110110000,
            0b0011010110111100,
            0b1001110011111111,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001100100000,
            0b1011011011010111,
            0b1011111011100011,
            0b0010010000100010,
            0b0010010100110011,
            0b1000111110101011,
            0b0010111100101111,
            0b1110111110110000,
            0b0011001110111110,
            0b1001111011111111,
            0b0011110011100000,
            0b1011111011100001,
            0b0010111000001100,
            0b1001000100000010,
            0b1010001011010010,
            0b0011010111001100,
            0b0010110000000101,
            0b1010001011110000,
            0b1000110011111111,
            0b0010010111001100,
            0b1100001000100001,
            0b0010110000000101,
            0b1100000110011111,
            0b1100000110110001,
            0b1001110011111111,
            0b1100001000100001,
            0b1010001011110000,
            0b1001110011111111,
            0b1000000100001000,
            0b0101000110100001,
            0b1000111100001000,
            0b0110111100010001,
            0b1000111111101101,
            0b1111111100010000,
            0b0010010100001110,
            0b0010100000000100,
            0b0010110000000101,
            0b1100000110011111,
            0b0011110011100000,
            0b1011001010010001,
            0b1000111001001011,
            0b1100001011111111,
            0b1010001010011111,
            0b1001111011111111,
            0b1011001100000010,
            0b1010001011111111,
            0b1101000000000000,
            0b1000101100000000,
            0b0010000001100001,
            0b1100000111000011,
            0b1000111100010111,
            0b0011010111110000,
            0b1011001110110111,
            0b1000111110011101,
            0b0010010111111111,
            0b1000111010101011,
            0b0010010011101110,
            0b1110111010000000,
            0b0011010110000000,
            0b1011111100010001,
            0b1111111001010000,
            0b1110111110000000,
            0b1001100000000001,
            0b1000111000001010,
            0b0011100011100000,
            0b1011011100010111,
            0b1001101100000001,
            0b1111111110000000,
            0b1110000100100000,
            0b1110000100110001,
            0b0010001000110000,
            0b1011011100011101,
            0b1011111100110011,
            0b0010010000100010,
            0b0010010100110011,
            0b1000111100010111,
            0b0011001111110000,
            0b1011001110110111,
            0b1000111110011101,
            0b0010001111111111,
            0b1000111010101011,
            0b0010001011101110,
            0b1110111010000000,
            0b0011001110000000,
            0b1011111100101010,
            0b1111111000110000,
            0b1110111110000000,
            0b1001100000000001,
            0b1000111000001010,
            0b0011100011100000,
            0b1011011100110000,
            0b1001101100000001,
            0b1111111110000000,
            0b1001000100000010,
            0b1010001100011000,
            0b0010101100001010,
            0b1011001111100101,
            0b1000111111101110,
            0b1110111110000000,
            0b1100001110101111,
            0b1000001000001011,
            0b1000111110011111,
            0b1010001101000011,
            0b0010101100001010,
            0b1000111111110101,
            0b1111111100000000,
            0b1001001000000001,
            0b1000001100010101,
            0b0011001000110000,
            0b1011001101010110,
            0b1000111110011111,
            0b1001111100000001,
            0b1000001100010111,
            0b0011111100110000,
            0b1011001100111011,
            0b1110111110000000,
            0b0010100000000000,
            0b1011001100111011,
            0b1000001100001010,
            0b0011100000110000,
            0b1011011101010101,
            0b1000111011110000,
            0b1111111000100000,
            0b1001111101100011,
            0b1111111011110001,
            0b1001111110011101,
            0b1111111000000011,
            0b1001101011111111,
            0b1011001100111011,
            0b1010001101000011,
            0b1000111110011111,
            0b1000001100001010,
            0b1000101000000001,
            0b0010101100000101,
            0b0010101100000000,
            0b1011001110010111,
            0b1001111100000001,
            0b1110111110000000,
            0b0010100000000000,
            0b1011001110010111,
            0b1000001100001010,
            0b0011100000110000,
            0b1011011101011010,
            0b1001101111111111,
            0b0010111100001010,
            0b1111111100000000,
            0b1001101000000001,
            0b1110101010000000,
            0b0011100000110000,
            0b1011011101101101,
            0b1111101000000000,
            0b1001101111111111,
            0b1010001101100110,
            0b0011101011111010,
            0b0010111100001110,
            0b1001111111111111,
            0b0010111010101110,
            0b1000001110110100,
            0b0011111000110000,
            0b1011001101011010,
            0b1110111010000000,
            0b0010100000000000,
            0b1011001101011010,
            0b1000001000001010,
            0b1010001110000101,
            0b0011111010101110,
            0b1111111010000000,
            0b0010111010101110,
            0b1111111000000000,
            0b1000001000001010,
            0b1001111000000001,
            0b1000001110110100,
            0b0011111000110000,
            0b1011001101011010,
            0b1110111010000000,
            0b0010100000000000,
            0b1011001101011010,
            0b1001001000000001,
            0b1000001100010101,
            0b0011001000110000,
            0b1011001101111001,
            0b1001111001100011,
            0b1000011111110000,
            0b1111011100100000,
            0b1111011111100001,
            0b1110011111000100,
            0b0011111010101110,
            0b0010110000000000,
            0b1011001110010100,
            0b1111011100000011,
            0b1111011111100001,
            0b1111011100000010,
            0b0010111010101110,
            0b1001111010011101,
            0b1010001110000101,
            0b1000111111110101,
            0b1111111100000000,
            0b1000111110110110,
            0b1000011100000010,
            0b1110111110000000,
            0b0011100001011000,
            0b1001100000000001,
            0b1001100011111111,
            0b0011100001110000,
            0b1011001110101001,
            0b1000110111110000,
            0b1000111010101011,
            0b0011111111101110,
            0b1111110111100000,
            0b1111110110000001,
            0b1110110111010100,
            0b0010110100000000,
            0b1011001110011110,
            0b1111111110000000,
            0b1001111100000001,
            0b1000111011000000,
            0b0011111111100000,
            0b1011011110011011,
            0b1101000000000000,
            0b0010101100001110,
            0b0010111011101110,
            0b1001111011111111,
            0b0010100011101000,
            0b1111111110000000,
            0b1000111111111010,
            0b1111111110000000,
            0b1101000000000000,
            0b1000111111111001,
            0b1111111100000000,
            0b1000111111111000,
            0b1111111100000000,
            0b1000111111110111,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000000111,
            0b1111111111100000,
            0b1000111000000001,
            0b1111111111100000,
            0b1000111000001101,
            0b1111111111100000,
            0b1000111000000101,
            0b1111111111100000,
            0b1000111000000000,
            0b1111111111100000,
            0b1000111000001111,
            0b1111111111100000,
            0b1000111000010110,
            0b1111111111100000,
            0b1000111000000101,
            0b1111111111100000,
            0b1000111000010010,
            0b1111111111100000,
            0b1000111111111000,
            0b1111111100000000,
            0b1000001000000010,
            0b1000001100010101,
            0b1000010000011110,
            0b1000111111110000,
            0b1000000100001010,
            0b1001001000000001,
            0b0011001001000000,
            0b1011001111100010,
            0b1001000100000001,
            0b0011000100110000,
            0b1011001111010110,
            0b1111111100010000,
            0b1111111100100001,
            0b1111111100000010,
            0b1111111100000101,
            0b1010001111011010,
            0b0001000000000000,
            0b1111111100000101,
            0b1101000000000000,
            0b1101000000000000
        };
        private readonly ushort[] gameOfLife = {
            0b1000111111111000,
            0b1000100111111000,
            0b1111111100000001,
            0b1000111000001100,
            0b1111111111101111,
            0b1000111000001001,
            0b1111111111101111,
            0b1000111000000110,
            0b1111111111101111,
            0b1000111000000101,
            0b1111111111101111,
            0b1111111100000000,
            0b1111111100000101,
            0b1111111100000010,
            0b1111111100001110,
            0b1100000001100111,
            0b1111111100001101,
            0b1000000100000000,
            0b1000001000000000,
            0b1100000000110000,
            0b1111111100011000,
            0b1111111100101001,
            0b1110111101001100,
            0b0100010000111110,
            0b1000110111111100,
            0b0011111011010000,
            0b1011010000011101,
            0b1000110100000001,
            0b1111000111010000,
            0b1001000100000001,
            0b0101000110011110,
            0b0011111000000000,
            0b1011000000010011,
            0b0011001000000000,
            0b1011000000100100,
            0b1100000001010111,
            0b1100000001001101,
            0b1000000100000000,
            0b1001001000000001,
            0b0101001010011110,
            0b0011111000000000,
            0b1011000000010011,
            0b1100000001010111,
            0b1000001000000000,
            0b1001011100000001,
            0b1111111101110010,
            0b1111111100001101,
            0b1010000000010011,
            0b0010000100000101,
            0b0010001000000110,
            0b1000001100000000,
            0b1001010100000001,
            0b1100000001000100,
            0b1001011000000001,
            0b1100000001000100,
            0b1001010111111111,
            0b1100000001000100,
            0b1001010111111111,
            0b1100000001000100,
            0b1001011011111111,
            0b1100000001000100,
            0b1001011011111111,
            0b1100000001000100,
            0b1001010100000001,
            0b1100000001000100,
            0b1001010100000001,
            0b1100000001000100,
            0b1101000000000000,
            0b0101010110011110,
            0b1011010001001100,
            0b0101011010011110,
            0b1011010001001100,
            0b1111111101011000,
            0b1111111101101001,
            0b1110111111101100,
            0b0010111000110011,
            0b1101000000000000,
            0b1000110100000000,
            0b1000111000100000,
            0b0010110111101011,
            0b1110110111000000,
            0b1111101111000000,
            0b1111110100000000,
            0b1001110100000001,
            0b0011110111100000,
            0b1011010001001111,
            0b1101000000000000,
            0b1000110100000000,
            0b1000111000100000,
            0b1001001011111111,
            0b1111111111011000,
            0b1111111100101001,
            0b1111111100001011,
            0b0010110111101011,
            0b1110101111000000,
            0b0011110000000000,
            0b1011000001100010,
            0b1111111100001010,
            0b1001110100000001,
            0b0011110111100000,
            0b1011010001011010,
            0b1001001000000001,
            0b1101000000000000,
            0b1000111000000000,
            0b1111111111101000,
            0b1000111000000000,
            0b1111111111101001,
            0b1111111100001010,
            0b1000111000000001,
            0b1111111111101000,
            0b1000111000000001,
            0b1111111111101001,
            0b1111111100001010,
            0b1000111000000001,
            0b1111111111101000,
            0b1000111000000010,
            0b1111111111101001,
            0b1111111100001010,
            0b1000111000000010,
            0b1111111111101000,
            0b1000111000000000,
            0b1111111111101001,
            0b1111111100001010,
            0b1000111000000010,
            0b1111111111101000,
            0b1000111000000001,
            0b1111111111101001,
            0b1111111100001010,
            0b1101000000000000
        };
        private readonly ushort[] mineSweeper = {
            0b1100000110011001,
            0b1000000100000111,
            0b1000001000000111,
            0b1100000100110101,
            0b1001001011111111,
            0b1011100000000011,
            0b1001000111111111,
            0b1011100000000010,
            0b1000111111111100,
            0b1111111100000000,
            0b1000000100000000,
            0b1000001000000000,
            0b1000101100001010,
            0b1000111111111010,
            0b1111111110110000,
            0b1000110001000000,
            0b0011110010111100,
            0b1000111000000000,
            0b1100000011101100,
            0b1000111111111111,
            0b1110111111100000,
            0b1000110100001000,
            0b0101110111100000,
            0b1011000000011001,
            0b1001001000000001,
            0b1000110100000100,
            0b0101110111100000,
            0b1011000000011101,
            0b1001000100000001,
            0b1000110100000010,
            0b0101110111100000,
            0b1011000000100001,
            0b1001001011111111,
            0b1000110100000001,
            0b0101110111100000,
            0b1011000000100101,
            0b1001000111111111,
            0b1000110100000111,
            0b0101000111010001,
            0b0101001011010010,
            0b1000110100010000,
            0b0101110111100000,
            0b1011000000111011,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010100100000,
            0b0101010001010000,
            0b1011010000111011,
            0b1000010100010000,
            0b0110010001010100,
            0b0101010001010000,
            0b1011000000110110,
            0b1001101111111111,
            0b1010000000110111,
            0b1001101100000001,
            0b1000111111111010,
            0b1111111110110000,
            0b1111001101000000,
            0b1100000100110101,
            0b1000110100100000,
            0b0101110111100000,
            0b1011000000111111,
            0b1100000010111010,
            0b1000110101000000,
            0b0101110111100000,
            0b1011000001000011,
            0b1100000001100001,
            0b1000111000000001,
            0b1100000011101100,
            0b1000111111110101,
            0b1111111100000000,
            0b0011110000000000,
            0b1011001000001101,
            0b1010000000010001,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010100100000,
            0b0101010001010000,
            0b1011010001010001,
            0b1001110011111111,
            0b0110010001010100,
            0b1000010100010000,
            0b0101010001010000,
            0b1011000001010111,
            0b1001101100000001,
            0b1000111111111010,
            0b1111111110110000,
            0b0100010100000101,
            0b0101010001010100,
            0b1000010101000000,
            0b0101010001010000,
            0b1011010111011110,
            0b1111001101000000,
            0b1100000100110101,
            0b1000111111110101,
            0b1111111100000000,
            0b1101000000000000,
            0b1100000110010100,
            0b1110001101000000,
            0b1000110100100000,
            0b0101010011010000,
            0b1011000010111001,
            0b1000110100000000,
            0b0010000100000111,
            0b0010001000001000,
            0b1001000111111111,
            0b1000100100000011,
            0b1000010000001000,
            0b0011000101000000,
            0b1011100001111101,
            0b0010100000000010,
            0b1001001011111111,
            0b1000101000000011,
            0b1000010000001000,
            0b0011001001000000,
            0b1011100001111010,
            0b1100000110010100,
            0b1110001100110000,
            0b1000010000010000,
            0b0101001101000000,
            0b1011000001111010,
            0b1001110100000001,
            0b1001001000000001,
            0b1001101011111111,
            0b1011010001110001,
            0b1001000100000001,
            0b1001100111111111,
            0b1011010001101011,
            0b0010011100000001,
            0b0010100000000010,
            0b1100000110010100,
            0b1110001101000000,
            0b1000001100001111,
            0b0101001101000100,
            0b0011010011010000,
            0b1011010010111001,
            0b1000111111101100,
            0b1001000111111111,
            0b1001001011111111,
            0b1111111100010000,
            0b1111111100100001,
            0b1000110100000011,
            0b1111111111010010,
            0b1111111111010011,
            0b1000010100001000,
            0b0011000101010000,
            0b1011100010101101,
            0b1000111111101100,
            0b1110111100010000,
            0b1110111100100001,
            0b1000010100001000,
            0b0011001001010000,
            0b1011100010011111,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010100110000,
            0b0101010001010000,
            0b1011010010011111,
            0b1100000010111010,
            0b1000111111101100,
            0b1110111100100011,
            0b1001001011111111,
            0b1011000010101000,
            0b1111111100100011,
            0b1110111100100001,
            0b1001001000000001,
            0b1111111100100001,
            0b1010000010010011,
            0b1110111100100001,
            0b1001001011111110,
            0b1111111100100001,
            0b1000001000000011,
            0b1111111100100011,
            0b1110111100010010,
            0b1001000111111111,
            0b1011000010110101,
            0b1111111100010010,
            0b1110111100010000,
            0b1001000100000001,
            0b1111111100010000,
            0b1010000010010000,
            0b1110111100010000,
            0b1110111100100001,
            0b1001000111111111,
            0b1001001000000001,
            0b1101000000000000,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010110000000,
            0b0110010001010100,
            0b1111001101000000,
            0b1000101001000000,
            0b1111101000010000,
            0b1111101000100001,
            0b1001101000000010,
            0b1000100101000000,
            0b0011101010010000,
            0b1011000011101011,
            0b1001101011111110,
            0b1110101000010000,
            0b1110101000100001,
            0b1100000110010100,
            0b1110001110010000,
            0b1100000001001010,
            0b1000010101111111,
            0b0101100101010000,
            0b1011010011000011,
            0b1001000111111111,
            0b1001001011111111,
            0b1000011100000011,
            0b1000010100001000,
            0b0011000101010000,
            0b1011100011100111,
            0b1000100000000011,
            0b1000010100001000,
            0b0011001001010000,
            0b1011100011100011,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010110000000,
            0b0101010001010000,
            0b1011010011100011,
            0b0110010001010100,
            0b1111001101000000,
            0b1111101000010000,
            0b1111101000100001,
            0b1001101000000010,
            0b1001001000000001,
            0b1001100011111111,
            0b1011010011010110,
            0b1001001011111101,
            0b1001000100000001,
            0b1001011111111111,
            0b1011010011010010,
            0b1010000011000011,
            0b1101000000000000,
            0b0010001000100100,
            0b0010010001000100,
            0b1000010100000010,
            0b1000110100100000,
            0b0011010011010000,
            0b1011100100000111,
            0b1000111111110001,
            0b1111111101000000,
            0b0010000100010011,
            0b0010001100110011,
            0b1000011000000101,
            0b0011001111010000,
            0b1011100100000001,
            0b1000111111110000,
            0b1111111100110000,
            0b0011111000000000,
            0b1011000011111111,
            0b1000111111110010,
            0b1010000100000000,
            0b1000111111110011,
            0b1111111100000000,
            0b1001001100000001,
            0b1001011011111111,
            0b1011010011110111,
            0b1001010000000100,
            0b1001010111111111,
            0b1011010011110000,
            0b0010000100010011,
            0b0010001100110011,
            0b1000010100000010,
            0b0011001111010000,
            0b1011100100100001,
            0b1000111111110000,
            0b1111111100110000,
            0b0010001000100100,
            0b0010010001000100,
            0b1000011000000101,
            0b0011010011010000,
            0b1011100100011011,
            0b1000111111110001,
            0b1111111101000000,
            0b0011111000000000,
            0b1011000100011001,
            0b1000111111110010,
            0b1010000100011010,
            0b1000111111110011,
            0b1111111100000000,
            0b1001010000000001,
            0b1001011011111111,
            0b1011010100010001,
            0b1001001100000100,
            0b1001010111111111,
            0b1011010100001010,
            0b1101000000000000,
            0b0010000100010011,
            0b0010001100110011,
            0b1000010100000011,
            0b1001001100000001,
            0b1000111111110000,
            0b1111111100110000,
            0b0010001000100100,
            0b0010010001000100,
            0b1000011000000011,
            0b1001010000000001,
            0b1000111111110001,
            0b1111111101000000,
            0b1000111111110011,
            0b1111111100000000,
            0b1001011011111111,
            0b1011010100101011,
            0b1001010111111111,
            0b1011010100100101,
            0b1101000000000000,
            0b1100000100100010,
            0b1100000110010100,
            0b1110001100110000,
            0b1000010000100000,
            0b0101001101000000,
            0b1011010101000000,
            0b1000010000010000,
            0b0101001101000000,
            0b1011010101101000,
            0b1010000101111010,
            0b1101000000000000,
            0b1000010001000000,
            0b0101001101000000,
            0b1011010101010111,
            0b1000010000001111,
            0b0101001101000011,
            0b0010000100010101,
            0b0010010101010101,
            0b0010001000100110,
            0b0010011001100110,
            0b1001010100000001,
            0b1001011000000001,
            0b1000011100000011,
            0b0011001100000000,
            0b1011000101010110,
            0b1100000110001101,
            0b1001010100000001,
            0b1001011111111111,
            0b1011010101010100,
            0b1001010111111101,
            0b1001011000000001,
            0b1001001111111111,
            0b1010000101001100,
            0b1101000000000000,
            0b0010000100010101,
            0b0010010101010101,
            0b0010001000100110,
            0b0010011001100110,
            0b1001010100000001,
            0b1001011000000010,
            0b1100000110001101,
            0b1001010100000001,
            0b1100000110001101,
            0b1001011000000001,
            0b1100000110001101,
            0b1001011011111110,
            0b1100000110001101,
            0b1001011000000001,
            0b1001010100000001,
            0b1100000110001101,
            0b1101000000000000,
            0b0010000100010101,
            0b0010010101010101,
            0b0010001000100110,
            0b0010011001100110,
            0b1001010100000001,
            0b1001011000000001,
            0b1100000110001101,
            0b1001011000000001,
            0b1100000110001101,
            0b1001011000000001,
            0b1100000110001101,
            0b1001010100000001,
            0b1100000110001101,
            0b1001011011111111,
            0b1100000110001101,
            0b1001010100000001,
            0b1100000110001101,
            0b1101000000000000,
            0b0010000100010101,
            0b0010010101010101,
            0b1000011100000011,
            0b1001010100000001,
            0b1000111111110000,
            0b1111111101010000,
            0b0010001000100110,
            0b0010011001100110,
            0b1000100000000011,
            0b1001011000000001,
            0b1000111111110001,
            0b1111111101100000,
            0b1000111111110010,
            0b1111111100000000,
            0b1001100011111111,
            0b1011010110000011,
            0b1001011111111111,
            0b1011010101111101,
            0b1101000000000000,
            0b1000111111110000,
            0b1111111101010000,
            0b1000111111110001,
            0b1111111101100000,
            0b1000111111110010,
            0b1111111100000000,
            0b1101000000000000,
            0b0010000100010011,
            0b0010001100110011,
            0b0010001100110011,
            0b0010001100100011,
            0b1101000000000000,
            0b1000100100001010,
            0b1000111111111110,
            0b1110111101000000,
            0b1110111101010000,
            0b1000011000000111,
            0b0101010001100100,
            0b0101010101100101,
            0b0010000100001011,
            0b0010001000001100,
            0b0010010000000001,
            0b0010010100000010,
            0b1100000110010100,
            0b0010101100000001,
            0b0010110000000010,
            0b1110001110110000,
            0b1000110001000000,
            0b0101101111000000,
            0b1011010110011010,
            0b0110101111001011,
            0b1111001110110000,
            0b1001010011111111,
            0b1001010111111111,
            0b1000011000000011,
            0b1000011100000011,
            0b1000100000001000,
            0b0011010010000000,
            0b1011100111000000,
            0b0011010110000000,
            0b1011100111000000,
            0b0010000100001011,
            0b0010001000001100,
            0b0010010000000001,
            0b0010010100000010,
            0b1100000110010100,
            0b0010101100000001,
            0b0010110000000010,
            0b1110001110100000,
            0b1001101000000001,
            0b1111001110100000,
            0b1001010100000001,
            0b1001011111111111,
            0b1011010110110001,
            0b1001010000000001,
            0b1001010111111101,
            0b1001011011111111,
            0b1011010110110000,
            0b1001100111111111,
            0b1011010110011010,
            0b1101000000000000,
            0b1100000100100010,
            0b0010000100010101,
            0b0010010101010101,
            0b0010001000100110,
            0b0010011001100110,
            0b1001010100000001,
            0b1001011000000001,
            0b1100000110001101,
            0b1001010100000001,
            0b1001011000000001,
            0b1100000110001101,
            0b1001010100000001,
            0b1001011000000001,
            0b1100000110001101,
            0b1001010111111110,
            0b1100000110001101,
            0b1001010100000010,
            0b1001011011111110,
            0b1100000110001101,
            0b1101000000000000,
            0b1000000100000111,
            0b1000001000000111,
            0b1100000110010100,
            0b1110001101000000,
            0b1000010101000000,
            0b0101010001010000,
            0b1011000111101011,
            0b1000010100010000,
            0b0101010001010000,
            0b1011010111101111,
            0b1100000100100010,
            0b1100000101010111,
            0b1010000111101111,
            0b1000010100010000,
            0b0101010001010000,
            0b1011000111101111,
            0b1100000111001010,
            0b1001001011111111,
            0b1011100111100000,
            0b1001000111111111,
            0b1011100111011111,
            0b1000111111110101,
            0b1111111100000000,
            0b1000111111111001,
            0b1111111100000000,
            0b1000111111110111,
            0b1000000100000111,
            0b1111111100010000,
            0b1000000100000001,
            0b1111111100010000,
            0b1000000100001101,
            0b1111111100010000,
            0b1000000100000101,
            0b1111111100010000,
            0b1000000100000000,
            0b1111111100010000,
            0b1000000100001111,
            0b1111111100010000,
            0b1000000100010110,
            0b1111111100010000,
            0b1000000100000101,
            0b1111111100010000,
            0b1000000100010010,
            0b1111111100010000,
            0b1000111111111000,
            0b1111111100000000,
            0b0001000000000000,
            0b1000111111111001,
            0b1111111100000000,
            0b1000111111110111,
            0b1000000100011001,
            0b1111111100010000,
            0b1000000100001111,
            0b1111111100010000,
            0b1000000100010101,
            0b1111111100010000,
            0b1000000100000000,
            0b1111111100010000,
            0b1000000100010111,
            0b1111111100010000,
            0b1000000100001111,
            0b1111111100010000,
            0b1000000100001110,
            0b1111111100010000,
            0b1000111111111000,
            0b1111111100000000,
            0b0001000000000000
        };

        protected override void Initialize() {
            ioHandler = new IOHandler(Inputs, Outputs);
        }

        protected override void DoLogicUpdate() {
            var address = ioHandler.GetInputAs<ushort>();
            var romSelect = ioHandler.GetInputAs<byte>(16);
            ioHandler.ClearOutputs();
            if (romSelect > 2) return;

            if (romSelect == 0) {
                var outputValue = address < tetris.Length ? tetris[address] : (ushort)0;
                ioHandler.OutputNumber(outputValue);
            } else if (romSelect == 1) {
                var outputValue = address < gameOfLife.Length ? gameOfLife[address] : (ushort)0;
                ioHandler.OutputNumber(outputValue);
            } else if (romSelect == 2) {
                var outputValue = address < mineSweeper.Length ? mineSweeper[address] : (ushort)0;
                ioHandler.OutputNumber(outputValue);
            }
        }
    }
}
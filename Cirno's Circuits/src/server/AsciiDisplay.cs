using LogicAPI.Server.Components;

namespace CirnosCircuits {
	public class AsciiDisplay: LogicComponent {
		private readonly long[] asciiTable = {
			0b00000000000000000000000000000000000, // [NUL]
			0b00000000000000000000000000000000000, // [SOH]
			0b00000000000000000000000000000000000, // [STX]
			0b00000000000000000000000000000000000, // [ETX]
			0b00000000000000000000000000000000000, // [EOT]
			0b00000000000000000000000000000000000, // [ENQ]
			0b00000000000000000000000000000000000, // [ACK]
			0b00000000000000000000000000000000000, // [BEL]
			0b00000000000000000000000000000000000, // [BS]
			0b00000000000000000000000000000000000, // [HT]
			0b00000000000000000000000000000000000, // [LF]
			0b00000000000000000000000000000000000, // [VT]
			0b00000000000000000000000000000000000, // [FF]
			0b00000000000000000000000000000000000, // [CR]
			0b00000000000000000000000000000000000, // [SO]
			0b00000000000000000000000000000000000, // [SI]
			0b00000000000000000000000000000000000, // [DLE]
			0b00000000000000000000000000000000000, // [DC1]
			0b00000000000000000000000000000000000, // [DC2]
			0b00000000000000000000000000000000000, // [DC3]
			0b00000000000000000000000000000000000, // [DC4]
			0b00000000000000000000000000000000000, // [NAK]
			0b00000000000000000000000000000000000, // [SYN]
			0b00000000000000000000000000000000000, // [ETB]
			0b00000000000000000000000000000000000, // [CAN]
			0b00000000000000000000000000000000000, // [EM]
			0b00000000000000000000000000000000000, // [SUB]
			0b00000000000000000000000000000000000, // [ESC]
			0b00000000000000000000000000000000000, // [FS]
			0b00000000000000000000000000000000000, // [GS]
			0b00000000000000000000000000000000000, // [RS]
			0b00000000000000000000000000000000000, // [US]
			0b00000000000000000000000000000000000, // space
			0b00100001000010000100001000000000100, // !
			0b01010010100101000000000000000000000, // "
			0b01010010101111101010111110101001010, // #
			0b00100011111010001110001011111000100, // $
			0b11000110010001000100010001001100011, // %
			0b01100100101010001000101011001001101, // &
			0b01100001000100000000000000000000000, // '
			0b00100010001000010000100000100000100, // (
			0b00100000100000100001000010001000100, // )
			0b00000001001010101110101010010000000, // *
			0b00000001000010011111001000010000000, // +
			0b00000000000000000000011000010001000, // ,
			0b00000000000000001110000000000000000, // -
			0b00000000000000000000000000011000110, // .
			0b00001000100001000100010000100010000, // /
			0b01110100011001110101110011000101110, // 0
			0b00100011000010000100001000010001110, // 1
			0b01110100010000100010001000100011111, // 2
			0b11111000100010000010000011000101110, // 3
			0b00010001100101011111000100001000010, // 4
			0b11111100001111000001000011000101110, // 5
			0b00110010001000011110100011000101110, // 6
			0b11111100010000100010001000010000100, // 7
			0b01110100011000101110100011000101110, // 8
			0b01110100011000101111000010001001100, // 9
			0b00000011000110000000011000110000000, // :
			0b00000011000110000000011000010001000, // ;
			0b00010001000100010000010000010000010, // <
			0b00000000001111100000111110000000000, // =
			0b01000001000001000001000100010001000, // >
			0b01110100010000100010001000000000100, // ?
			0b01110100010000101101101011010101110, // @
			0b01110100011000111111100011000110001, // A
			0b11110100011000111110100011000111110, // B
			0b01110100011000010000100001000101110, // C
			0b11100100101000110001100011001011100, // D
			0b11111100001000011110100001000011111, // E
			0b11111100001000011110100001000010000, // F
			0b01110100011000010111100011000101110, // G
			0b10001100011000111111100011000110001, // H
			0b01110001000010000100001000010001110, // I
			0b00111000010000100001000011000101110, // J
			0b10001100101010011000101001001010001, // K
			0b10000100001000010000100001000011111, // L
			0b10001110111010110001100011000110001, // M
			0b10001100011100110101100111000110001, // N
			0b01110100011000110001100011000101110, // O
			0b11110100011000111110100001000010000, // P
			0b01110100011000110001101011001001101, // Q
			0b11110100011000111110101001001010001, // R
			0b01110100011000001110000011000101110, // S
			0b11111001000010000100001000010000100, // T
			0b10001100011000110001100011000101110, // U
			0b10001100011000101010010100010000100, // V
			0b10001100011000110001101011101110001, // W
			0b10001100010101000100010101000110001, // X
			0b10001100010101000100001000010000100, // Y
			0b11111000010001000100010001000011111, // Z
			0b01110010000100001000010000100001110, // [
			0b10000010000100000100000100001000001, // \
			0b01110000100001000010000100001001110, // ]
			0b00100010101000100000000000000000000, // ^
			0b00000000000000000000000000000011111, // _
			0b01000001000001000000000000000000000, // `
			0b00000000000111000001011111000101111, // a
			0b10000100001011011001100011000111110, // b
			0b00000000000111010000100001000101110, // c
			0b00001000010000101101100111000101111, // d
			0b00000000000111010001111111000001110, // e
			0b00110010000100011100010000100001000, // f
			0b00000011111000110001011110000101110, // g
			0b10000100001011011001100011000110001, // h
			0b00100000000110000100001000010001110, // i
			0b00010000000011000010000101001001100, // j
			0b10000100001001010100110001010010010, // k
			0b01100001000010000100001000010001110, // l
			0b00000000001101010101101011000110001, // m
			0b00000000001011011001100011000110001, // n
			0b00000000000111010001100011000101110, // o
			0b00000000001111010001111101000010000, // p
			0b00000011011001101111000010000100001, // q
			0b00000000001011011001100001000010000, // r
			0b00000000000111010000011100000111110, // s
			0b01000010001110001000010000100100110, // t
			0b00000000000000010001100011001101101, // u
			0b00000000001000110001100010101000100, // v
			0b00000000001000110101101011010101010, // w
			0b00000000001000101010001000101010001, // x
			0b00000000001000110001011110000101110, // y
			0b00000000001111100010001000100011111, // z
			0b00010001000010001000001000010000010, // {
			0b00100001000010000100001000010000100, // |
			0b01000001000010000010001000010001000, // }
			0b00000000000000001101100100000000000, // ~
			0b00000000000000000000000000000000000  // [DEL]
		};

		private IOHandler ioHandler;

		protected override void Initialize() {
			ioHandler = new IOHandler(Inputs, Outputs);
		}
		
		protected override void DoLogicUpdate() {
			var address = ioHandler.GetInputAs<byte>() & 0x7F;

			var value = asciiTable[address] | (asciiTable[address] << 5) | (asciiTable[address] << 10) |
				(asciiTable[address] << 15) | (asciiTable[address] << 20) | (asciiTable[address] << 25) |
				(asciiTable[address] << 30);

			ioHandler.OutputNumber(value);
		}
    } // Completed
	
	public class BatToAscii : LogicComponent {
		private bool a, b, c, d, e;
		
		protected override void Initialize() {
			a = false;
			b = false;
			c = false;
			d = false;
			e = false;
		}

		protected override void DoLogicUpdate() {
			a = Inputs[0].On;
			b = Inputs[1].On;
			c = Inputs[2].On;
			d = Inputs[3].On;
			e = Inputs[4].On;
			
			Outputs[0].On = a&!b | !a&(c|d) | !(c|d)&e | b&!(c|e);
			Outputs[1].On = a&b&(c | d&e) | !(a|b|c|d|e);
			Outputs[2].On = a&(!b | !d&e | !(c|e));
			Outputs[3].On = b&(!(a&c)|e);
			Outputs[4].On = c&(!(a&b)|e) | a&b&d&e;
			Outputs[5].On = d | a&b&c&e;
			Outputs[6].On = e&!(a&b&d) | a&b&c;
		}
	}
}
